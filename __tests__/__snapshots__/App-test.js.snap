// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "dodgerblue",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <Text
    style={
      Object {
        "color": "white",
        "fontSize": 36,
        "marginBottom": 40,
      }
    }
  >
    Sleepio
  </Text>
  <Text
    style={
      Object {
        "color": "white",
        "fontSize": 20,
        "margin": 20,
      }
    }
  >
    Sleep Score: 0
  </Text>
  <View
    style={
      Object {
        "alignItems": "center",
        "borderColor": "white",
        "borderRadius": 5,
        "borderWidth": 1,
        "justifyContent": "center",
        "margin": 20,
        "paddingTop": 10,
        "width": 300,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 18,
        }
      }
    >
      Duration in bed (hours):
    </Text>
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderColor": "white",
          "borderRadius": 4,
          "borderWidth": 1,
          "margin": 14,
          "opacity": 1,
          "padding": 6,
          "paddingHorizontal": 10,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "white",
          }
        }
      >
        Select
      </Text>
    </View>
    <Modal
      animationType="none"
      hardwareAccelerated={false}
      onRequestClose={[Function]}
      supportedOrientations={
        Array [
          "portrait",
          "portrait-upside-down",
          "landscape",
          "landscape-left",
          "landscape-right",
        ]
      }
      transparent={true}
      visible={false}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "center",
        "borderColor": "white",
        "borderRadius": 5,
        "borderWidth": 1,
        "justifyContent": "center",
        "margin": 20,
        "paddingTop": 10,
        "width": 300,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 18,
        }
      }
    >
      Duration asleep (hours):
    </Text>
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderColor": "white",
          "borderRadius": 4,
          "borderWidth": 1,
          "margin": 14,
          "opacity": 1,
          "padding": 6,
          "paddingHorizontal": 10,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "white",
          }
        }
      >
        Select
      </Text>
    </View>
    <Modal
      animationType="none"
      hardwareAccelerated={false}
      onRequestClose={[Function]}
      supportedOrientations={
        Array [
          "portrait",
          "portrait-upside-down",
          "landscape",
          "landscape-left",
          "landscape-right",
        ]
      }
      transparent={true}
      visible={false}
    />
  </View>
  <View
    style={
      Object {
        "marginTop": 20,
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
            Object {},
          ]
        }
      >
        <Text
          disabled={true}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
              Object {
                "color": "white",
              },
              Object {
                "color": "#cdcdcd",
              },
            ]
          }
        >
          Calculate
        </Text>
      </View>
    </View>
  </View>
</View>
`;
